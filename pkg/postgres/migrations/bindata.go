// Code generated by go-bindata.
// sources:
// 20180827021436_users_table.down.sql
// 20180827021436_users_table.up.sql
// 20180828183535_set_utc_timezone.down.sql
// 20180828183535_set_utc_timezone.up.sql
// 20180905005007_create_posts_table.down.sql
// 20180905005007_create_posts_table.up.sql
// 20180905005048_create_post_votes_table.down.sql
// 20180905005048_create_post_votes_table.up.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __20180827021436_users_tableDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x28\x2d\x4e\x2d\x2a\xb6\x06\x04\x00\x00\xff\xff\xc8\x3d\x4e\x55\x1b\x00\x00\x00")

func _20180827021436_users_tableDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__20180827021436_users_tableDownSql,
		"20180827021436_users_table.down.sql",
	)
}

func _20180827021436_users_tableDownSql() (*asset, error) {
	bytes, err := _20180827021436_users_tableDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "20180827021436_users_table.down.sql", size: 27, mode: os.FileMode(420), modTime: time.Unix(1535316351, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __20180827021436_users_tableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xcc\xb1\xca\xc2\x30\x14\xc5\xf1\xbd\x4f\x71\xc6\x16\xbe\x37\xf8\xa6\xa8\x57\x28\xa6\xb5\xc6\x1b\xb0\x63\x30\x17\x1a\x48\x2b\x24\x16\x5f\x5f\xb4\x2e\x5d\xba\x9e\xdf\x9f\xb3\x37\xa4\x98\xc0\x6a\xa7\x09\x73\x96\x94\xcb\x02\x00\x82\x47\x96\x14\x5c\x44\x67\xea\x46\x99\x1e\x27\xea\xff\xbe\x34\x07\x0f\xa6\x1b\xc3\xb6\xf5\xc5\x12\xda\x33\xa3\xb5\x5a\xff\x34\x4b\x9a\xdc\x28\x1b\x89\x8c\x2e\xc4\x0d\x1f\x5c\x1e\x16\x5e\xef\xf7\x24\xee\x29\x1e\x5c\x37\x74\x65\xd5\x74\x38\xd0\x51\x59\xcd\x98\x1e\xaf\xb2\x5a\x22\x2f\x51\xd6\xd1\xe7\xa0\xa8\xfe\xdf\x01\x00\x00\xff\xff\x4f\x3e\xd3\x4e\xea\x00\x00\x00")

func _20180827021436_users_tableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__20180827021436_users_tableUpSql,
		"20180827021436_users_table.up.sql",
	)
}

func _20180827021436_users_tableUpSql() (*asset, error) {
	bytes, err := _20180827021436_users_tableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "20180827021436_users_table.up.sql", size: 234, mode: os.FileMode(420), modTime: time.Unix(1535316298, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __20180828183535_set_utc_timezoneDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\x2d\x51\x28\xc9\xcc\x4d\xad\xca\xcf\x4b\x55\x08\xf1\x57\x50\xcf\xc9\x4f\x4e\xcc\x01\x89\xa8\x5b\x03\x02\x00\x00\xff\xff\xfc\x5b\x1f\x11\x1c\x00\x00\x00")

func _20180828183535_set_utc_timezoneDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__20180828183535_set_utc_timezoneDownSql,
		"20180828183535_set_utc_timezone.down.sql",
	)
}

func _20180828183535_set_utc_timezoneDownSql() (*asset, error) {
	bytes, err := _20180828183535_set_utc_timezoneDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "20180828183535_set_utc_timezone.down.sql", size: 28, mode: os.FileMode(420), modTime: time.Unix(1535461567, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __20180828183535_set_utc_timezoneUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\x2d\x51\x28\xc9\xcc\x4d\xad\xca\xcf\x4b\x55\x08\xf1\x57\x50\x0f\x0d\x71\x56\xb7\x06\x04\x00\x00\xff\xff\x01\xf6\x08\xbb\x16\x00\x00\x00")

func _20180828183535_set_utc_timezoneUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__20180828183535_set_utc_timezoneUpSql,
		"20180828183535_set_utc_timezone.up.sql",
	)
}

func _20180828183535_set_utc_timezoneUpSql() (*asset, error) {
	bytes, err := _20180828183535_set_utc_timezoneUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "20180828183535_set_utc_timezone.up.sql", size: 22, mode: os.FileMode(420), modTime: time.Unix(1535461551, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __20180905005007_create_posts_tableDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x28\xc8\x2f\x2e\x29\xb6\x06\x04\x00\x00\xff\xff\x09\xa2\x6c\xd1\x1b\x00\x00\x00")

func _20180905005007_create_posts_tableDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__20180905005007_create_posts_tableDownSql,
		"20180905005007_create_posts_table.down.sql",
	)
}

func _20180905005007_create_posts_tableDownSql() (*asset, error) {
	bytes, err := _20180905005007_create_posts_tableDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "20180905005007_create_posts_table.down.sql", size: 27, mode: os.FileMode(420), modTime: time.Unix(1536088831, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __20180905005007_create_posts_tableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8c\xb1\x0a\xc2\x30\x18\x06\xf7\x3e\xc5\x37\xb6\xe0\x1b\x38\xc5\xfa\x57\x8a\x69\x2c\xe9\x5f\xb0\x93\x54\x13\x30\x50\x8c\x24\x29\xe2\xdb\x8b\xd6\x45\x70\xbd\x3b\xae\xd4\x24\x98\xc0\x62\x23\x09\x77\x1f\x53\xcc\x33\x00\x70\x06\xd1\x06\x37\x4e\x68\x75\xdd\x08\x3d\x60\x4f\xc3\xea\xa3\xc6\x39\x5d\x7d\x38\x39\x83\x5a\x31\xed\x48\x43\x53\x45\x9a\x54\x49\x1d\xe6\x68\x43\xcc\x9d\x29\x96\x36\xb9\x34\x59\x30\x1d\x19\xea\xc0\x50\xbd\x94\x8b\x38\x7b\xf3\xfc\xc7\x2f\xc1\x8e\xc9\x1a\x70\xdd\x50\xc7\xa2\x69\xb1\xa5\x4a\xf4\x92\x71\xf3\x8f\xfc\x7b\x35\x76\xb2\xbf\xd1\x7b\x90\x15\xeb\x57\x00\x00\x00\xff\xff\x13\xa4\x58\xae\xce\x00\x00\x00")

func _20180905005007_create_posts_tableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__20180905005007_create_posts_tableUpSql,
		"20180905005007_create_posts_table.up.sql",
	)
}

func _20180905005007_create_posts_tableUpSql() (*asset, error) {
	bytes, err := _20180905005007_create_posts_tableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "20180905005007_create_posts_table.up.sql", size: 206, mode: os.FileMode(420), modTime: time.Unix(1536088816, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __20180905005048_create_post_votes_tableDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x28\xc8\x2f\x2e\x89\x2f\xcb\x2f\x49\x2d\xb6\x06\x04\x00\x00\xff\xff\x2f\xd5\x5f\x4a\x20\x00\x00\x00")

func _20180905005048_create_post_votes_tableDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__20180905005048_create_post_votes_tableDownSql,
		"20180905005048_create_post_votes_table.down.sql",
	)
}

func _20180905005048_create_post_votes_tableDownSql() (*asset, error) {
	bytes, err := _20180905005048_create_post_votes_tableDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "20180905005048_create_post_votes_table.down.sql", size: 32, mode: os.FileMode(420), modTime: time.Unix(1536088878, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __20180905005048_create_post_votes_tableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xcc\xb1\xce\x82\x30\x00\xc4\xf1\x9d\xa7\xb8\xb1\xcd\xc7\x37\x30\x3b\x61\x73\x2a\x01\xab\xd6\x32\x30\x11\x92\x76\x68\x42\x82\xa1\xe8\xf3\x1b\x50\x8c\x83\xf3\xff\x77\xa7\x0c\x73\x4b\xd8\x7c\x5b\x11\xb7\x21\x4e\xed\x63\x98\x7c\x14\x09\x00\x04\x87\xe8\xc7\xd0\xf5\x38\x9b\xe2\x98\x9b\x06\x25\x9b\x74\x49\xb3\x1a\xdb\xe0\x50\x68\xcb\x3d\x0d\x0c\x77\x34\xd4\x8a\x57\xdc\xa3\x1f\xa3\x08\x4e\xbe\xe8\xf2\xfa\x5b\xce\xe9\x4b\xd6\xba\xb8\xd4\x14\xeb\x77\xba\x4e\xdf\xd9\xf9\x7e\xea\x3e\x37\xfa\x64\xa1\xeb\xaa\x82\x3a\x50\x95\x62\x8d\x10\xff\x59\x8a\xbf\x4c\xca\x44\x6e\x9e\x01\x00\x00\xff\xff\xed\x55\x93\xc9\xde\x00\x00\x00")

func _20180905005048_create_post_votes_tableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__20180905005048_create_post_votes_tableUpSql,
		"20180905005048_create_post_votes_table.up.sql",
	)
}

func _20180905005048_create_post_votes_tableUpSql() (*asset, error) {
	bytes, err := _20180905005048_create_post_votes_tableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "20180905005048_create_post_votes_table.up.sql", size: 222, mode: os.FileMode(420), modTime: time.Unix(1536088865, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"20180827021436_users_table.down.sql": _20180827021436_users_tableDownSql,
	"20180827021436_users_table.up.sql": _20180827021436_users_tableUpSql,
	"20180828183535_set_utc_timezone.down.sql": _20180828183535_set_utc_timezoneDownSql,
	"20180828183535_set_utc_timezone.up.sql": _20180828183535_set_utc_timezoneUpSql,
	"20180905005007_create_posts_table.down.sql": _20180905005007_create_posts_tableDownSql,
	"20180905005007_create_posts_table.up.sql": _20180905005007_create_posts_tableUpSql,
	"20180905005048_create_post_votes_table.down.sql": _20180905005048_create_post_votes_tableDownSql,
	"20180905005048_create_post_votes_table.up.sql": _20180905005048_create_post_votes_tableUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"20180827021436_users_table.down.sql": &bintree{_20180827021436_users_tableDownSql, map[string]*bintree{}},
	"20180827021436_users_table.up.sql": &bintree{_20180827021436_users_tableUpSql, map[string]*bintree{}},
	"20180828183535_set_utc_timezone.down.sql": &bintree{_20180828183535_set_utc_timezoneDownSql, map[string]*bintree{}},
	"20180828183535_set_utc_timezone.up.sql": &bintree{_20180828183535_set_utc_timezoneUpSql, map[string]*bintree{}},
	"20180905005007_create_posts_table.down.sql": &bintree{_20180905005007_create_posts_tableDownSql, map[string]*bintree{}},
	"20180905005007_create_posts_table.up.sql": &bintree{_20180905005007_create_posts_tableUpSql, map[string]*bintree{}},
	"20180905005048_create_post_votes_table.down.sql": &bintree{_20180905005048_create_post_votes_tableDownSql, map[string]*bintree{}},
	"20180905005048_create_post_votes_table.up.sql": &bintree{_20180905005048_create_post_votes_tableUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

